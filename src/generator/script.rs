use crate::models::Hook;
#[cfg(test)]
use crate::models::{HookType, Command};
use anyhow::Result;

pub struct ScriptGenerator;

impl ScriptGenerator {
    pub fn new() -> Self {
        ScriptGenerator
    }
    
    pub fn generate(&self, hook: &Hook) -> Result<String> {
        let mut script = String::new();
        
        script.push_str("#!/bin/sh\n");
        script.push_str("# Generated by hookman\n");
        script.push_str("# DO NOT EDIT - This file is managed by hookman\n");
        script.push('\n');
        script.push_str("set -e  # Exit on first error\n");
        script.push('\n');
        
        if hook.commands.is_empty() {
            script.push_str("# No commands configured for this hook\n");
            return Ok(script);
        }
        
        script.push_str(&format!("echo \"Running {} hooks...\"\n", hook.hook_type));
        script.push('\n');
        
        for command in &hook.commands {
            if let Some(desc) = &command.description {
                script.push_str(&format!("# {}: {}\n", command.id, desc));
                script.push_str(&format!("echo \"  → {}: {}\"\n", command.id, desc));
            } else {
                script.push_str(&format!("# {}\n", command.id));
                script.push_str(&format!("echo \"  → {}\"\n", command.id));
            }
            script.push_str(&format!("{}\n", command.command));
            script.push('\n');
        }
        
        script.push_str(&format!("echo \"All {} hooks passed!\"\n", hook.hook_type));
        
        Ok(script)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generate_empty_hook() {
        let generator = ScriptGenerator::new();
        let hook = Hook::new(HookType::PreCommit);
        
        let script = generator.generate(&hook).unwrap();
        
        assert!(script.contains("#!/bin/sh"));
        assert!(script.contains("# Generated by hookman"));
        assert!(script.contains("# No commands configured for this hook"));
    }

    #[test]
    fn test_generate_hook_with_commands() {
        let generator = ScriptGenerator::new();
        let mut hook = Hook::new(HookType::PreCommit);
        
        hook.commands.push(Command::new(
            "format".to_string(),
            "cargo fmt -- --check".to_string(),
            Some("Check formatting".to_string()),
        ));
        
        hook.commands.push(Command::new(
            "lint".to_string(),
            "cargo clippy".to_string(),
            None,
        ));
        
        let script = generator.generate(&hook).unwrap();
        
        assert!(script.contains("#!/bin/sh"));
        assert!(script.contains("Running pre-commit hooks..."));
        assert!(script.contains("# format: Check formatting"));
        assert!(script.contains("echo \"  → format: Check formatting\""));
        assert!(script.contains("cargo fmt -- --check"));
        assert!(script.contains("# lint"));
        assert!(script.contains("echo \"  → lint\""));
        assert!(script.contains("cargo clippy"));
        assert!(script.contains("All pre-commit hooks passed!"));
    }

    #[test]
    fn test_script_has_error_handling() {
        let generator = ScriptGenerator::new();
        let hook = Hook::new(HookType::PrePush);
        
        let script = generator.generate(&hook).unwrap();
        
        assert!(script.contains("set -e  # Exit on first error"));
    }
}