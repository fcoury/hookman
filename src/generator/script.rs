use crate::models::Hook;
use anyhow::Result;

pub struct ScriptGenerator;

impl ScriptGenerator {
    pub fn new() -> Self {
        ScriptGenerator
    }
    
    pub fn generate(&self, hook: &Hook) -> Result<String> {
        let mut script = String::new();
        
        script.push_str("#!/bin/sh\n");
        script.push_str("# Generated by hookman\n");
        script.push_str("# DO NOT EDIT - This file is managed by hookman\n");
        script.push_str("\n");
        script.push_str("set -e  # Exit on first error\n");
        script.push_str("\n");
        
        if hook.commands.is_empty() {
            script.push_str("# No commands configured for this hook\n");
            return Ok(script);
        }
        
        script.push_str(&format!("echo \"Running {} hooks...\"\n", hook.hook_type));
        script.push_str("\n");
        
        for command in &hook.commands {
            if let Some(desc) = &command.description {
                script.push_str(&format!("# {}: {}\n", command.id, desc));
                script.push_str(&format!("echo \"  → {}: {}\"\n", command.id, desc));
            } else {
                script.push_str(&format!("# {}\n", command.id));
                script.push_str(&format!("echo \"  → {}\"\n", command.id));
            }
            script.push_str(&format!("{}\n", command.command));
            script.push_str("\n");
        }
        
        script.push_str(&format!("echo \"All {} hooks passed!\"\n", hook.hook_type));
        
        Ok(script)
    }
}